name: Docker Multi-Arch Build & Push (with cache)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # 缓存镜像名，统一放在 ghcr.io，方便跨 runner 复用
  CACHE_IMAGE: ghcr.io/${{ github.repository }}:build-cache
  RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提前拉取缓存镜像，避免每次都从零开始
      - name: Pull cache image
        run: |
          docker pull ${{ env.CACHE_IMAGE }} || true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # ↓↓↓ 关键缓存配置 ↓↓↓
          cache-from: |
            type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: |
            type=registry,ref=${{ env.CACHE_IMAGE }},mode=max

      - name: Output image URLs
        run: |
          echo "Image with latest tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Image with unique tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"

      # 可选：Render Deploy Hook（与缓存无关，保留原功能）
      - name: Trigger Render Deploy Hook
        if: env.RENDER_DEPLOY_HOOK != ''
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
