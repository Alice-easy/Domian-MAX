name: Docker Build & Push with Cache

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # 支持手动触发

env:
  REGISTRY: ghcr.io
  RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      # 步骤1: 生成安全镜像名称（全部小写）
      - name: Generate safe image names
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$OWNER_LOWER/$REPO_NAME" >> $GITHUB_ENV
          echo "CACHE_IMAGE=${{ env.REGISTRY }}/$OWNER_LOWER/$REPO_NAME:build-cache" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2: Docker 环境配置
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤3: 生成镜像标签（latest + sha）
      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=sha-

      # 步骤4: 构建并推送镜像（启用缓存）
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max

      # 步骤5: 触发 Render 部署
      - name: Trigger Render Deploy
        if: env.RENDER_DEPLOY_HOOK != ''
        env:
          SECURE_HOOK: ${{ env.RENDER_DEPLOY_HOOK }}
        run: |
          echo "触发 Render 部署..."
          curl -sfSLX POST "$SECURE_HOOK"
