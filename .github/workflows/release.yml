# 发布工作流（默认禁用）
name: Release

on:
  # 默认禁用自动触发，需要手动启用
  # push:
  #   tags:
  #     - "v*"
  workflow_dispatch:
    inputs:
      enable_workflow:
        description: "启用工作流（默认禁用）"
        required: true
        default: false
        type: boolean
      version:
        description: "发布版本号 (例如: v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "是否为预发布版本"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== 版本验证 =====
  validate-release:
    name: 验证发布
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_workflow == true }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证版本号
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
            IS_PRERELEASE="${{ inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # 检查是否为预发布版本 (包含 alpha, beta, rc)
            if echo "$VERSION" | grep -qE "(alpha|beta|rc)"; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          # 验证版本号格式
          if ! echo "$VERSION" | grep -qE "^v[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "错误: 版本号格式不正确 ($VERSION)"
            echo "正确格式: v1.0.0"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION (预发布: $IS_PRERELEASE)"

      - name: 检查变更日志
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "警告: 未找到 CHANGELOG.md 文件"
          elif ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
            echo "警告: CHANGELOG.md 中未找到版本 ${{ steps.version.outputs.version }} 的记录"
          fi

  # ===== 运行完整测试 =====
  full-test-suite:
    name: 完整测试套件
    uses: ./.github/workflows/ci-cd.yml
    with:
      skip_tests: false
    secrets: inherit

  # ===== 构建发布镜像 =====
  build-release:
    name: 构建发布镜像
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 生成镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=stable,enable={{is_default_branch}}

      - name: 构建并推送发布镜像
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILDTIME=${{ github.event.repository.updated_at }}

  # ===== 安全扫描 =====
  security-scan:
    name: 发布版本安全扫描
    runs-on: ubuntu-latest
    needs: build-release

    steps:
      - name: 运行 Trivy 安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(needs.build-release.outputs.image-tags)[0] }}
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  # ===== 生成发布说明 =====
  generate-release-notes:
    name: 生成发布说明
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 生成发布说明
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # 查找上一个标签
          PREV_TAG=$(git describe --abbrev=0 --tags --exclude="$VERSION" 2>/dev/null || echo "")

          echo "## 🚀 Domain MAX $VERSION" > release-notes.md
          echo "" >> release-notes.md

          # 如果有上一个标签，生成变更日志
          if [ -n "$PREV_TAG" ]; then
            echo "### 📋 变更内容" >> release-notes.md
            echo "" >> release-notes.md
            
            # 获取提交信息
            git log --pretty=format:"- %s" "$PREV_TAG"..HEAD >> release-notes.md
            echo "" >> release-notes.md
          fi

          # 添加发布信息
          echo "### 📦 发布信息" >> release-notes.md
          echo "" >> release-notes.md
          echo "- **版本**: $VERSION" >> release-notes.md
          echo "- **发布时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          echo "- **提交**: \`$(git rev-parse --short HEAD)\`" >> release-notes.md
          echo "" >> release-notes.md

          # 添加部署说明
          echo "### 🚀 部署说明" >> release-notes.md
          echo "" >> release-notes.md
          echo "**Docker 镜像**:" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:$VERSION" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md

          echo "**快速部署**:" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# 下载最新版本" >> release-notes.md
          echo "wget https://github.com/${{ github.repository }}/archive/$VERSION.tar.gz" >> release-notes.md
          echo "tar -xzf $VERSION.tar.gz" >> release-notes.md
          echo "cd domain-max-*/" >> release-notes.md
          echo "" >> release-notes.md
          echo "# 部署" >> release-notes.md
          echo "./scripts/deploy-complete.sh" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md

          # 添加升级说明
          echo "### ⬆️ 升级说明" >> release-notes.md
          echo "" >> release-notes.md
          echo "如果从旧版本升级，请按照以下步骤操作：" >> release-notes.md
          echo "" >> release-notes.md
          echo "1. 备份数据" >> release-notes.md
          echo "2. 停止服务: \`docker-compose down\`" >> release-notes.md
          echo "3. 拉取新镜像: \`docker-compose pull\`" >> release-notes.md
          echo "4. 启动服务: \`docker-compose up -d\`" >> release-notes.md
          echo "" >> release-notes.md

          # 添加支持信息
          echo "### 🆘 获取帮助" >> release-notes.md
          echo "" >> release-notes.md
          echo "- 📖 [部署文档](docs/deployment-guide.md)" >> release-notes.md
          echo "- 🐛 [问题反馈](https://github.com/${{ github.repository }}/issues)" >> release-notes.md
          echo "- 💬 [讨论区](https://github.com/${{ github.repository }}/discussions)" >> release-notes.md

          # 输出到 GitHub Actions
          {
            echo 'notes<<EOF'
            cat release-notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: 上传发布说明
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  # ===== 创建 GitHub Release =====
  create-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    needs:
      [validate-release, build-release, security-scan, generate-release-notes]
    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 创建 Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Domain MAX ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

      - name: 构建源码包
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git archive --format=tar.gz --prefix=domain-max-${VERSION#v}/ HEAD > domain-max-${VERSION#v}.tar.gz
          git archive --format=zip --prefix=domain-max-${VERSION#v}/ HEAD > domain-max-${VERSION#v}.zip

      - name: 上传源码包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./domain-max-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_name: domain-max-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: 上传源码 ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./domain-max-${{ needs.validate-release.outputs.version }}.zip
          asset_name: domain-max-${{ needs.validate-release.outputs.version }}.zip
          asset_content_type: application/zip

  # ===== 部署到生产环境 =====
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    environment: production

    steps:
      - name: 部署到生产环境
        run: |
          echo "🚀 部署 Domain MAX ${{ needs.validate-release.outputs.version }} 到生产环境"
          # 这里添加生产环境部署逻辑

      - name: 验证部署
        run: |
          echo "✅ 验证生产环境部署"
          # 运行部署验证脚本

  # ===== 发送通知 =====
  notify:
    name: 发送发布通知
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-production]
    if: always()

    steps:
      - name: 发送 Slack 通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            🎉 Domain MAX ${{ needs.validate-release.outputs.version }} 已发布！

            📦 Release: ${{ needs.create-release.outputs.release-url }}
            🚀 镜像: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}

            ${{ needs.validate-release.outputs.is-prerelease == 'true' && '⚠️ 这是一个预发布版本' || '✅ 生产环境已更新' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 发送邮件通知
        if: secrets.SMTP_HOST && secrets.SMTP_USER
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🎉 Domain MAX ${{ needs.validate-release.outputs.version }} 已发布"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_USER }}
          body: |
            Domain MAX 新版本已发布！

            版本: ${{ needs.validate-release.outputs.version }}
            发布页面: ${{ needs.create-release.outputs.release-url }}

            感谢您使用 Domain MAX！
