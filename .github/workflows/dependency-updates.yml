# 依赖更新工作流（默认禁用）
name: Dependency Updates

on:
  # 默认禁用自动触发，需要手动启用
  # schedule:
  #   # 每周一早上 9:00 UTC 检查依赖更新
  #   - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      enable_workflow:
        description: "启用工作流（默认禁用）"
        required: true
        default: false
        type: boolean
      update_type:
        description: "更新类型"
        required: false
        default: "all"
        type: choice
        options:
          - go
          - node
          - all

jobs:
  # ===== Go 依赖更新 =====
  update-go-dependencies:
    name: 更新 Go 依赖
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_workflow == true && (inputs.update_type == 'go' || inputs.update_type == 'all') }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: 更新 Go 依赖
        run: |
          go mod tidy
          go get -u ./...
          go mod tidy

      - name: 运行测试
        run: |
          go test ./...

      - name: 创建 Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Go dependencies"
          title: "🔄 自动更新 Go 依赖"
          body: |
            ## 🔄 自动依赖更新

            此 PR 自动更新了 Go 项目的依赖包到最新版本。

            ### 📋 检查清单
            - [x] 依赖更新完成
            - [x] 测试通过
            - [ ] 手动验证功能正常

            ### 🔍 请注意
            请仔细检查更新的依赖是否存在破坏性变更。
          branch: automated/update-go-dependencies
          delete-branch: true

  # ===== Node.js 依赖更新 =====
  update-node-dependencies:
    name: 更新 Node.js 依赖
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: 安装 npm-check-updates
        run: npm install -g npm-check-updates

      - name: 更新 Node.js 依赖
        working-directory: ./web
        run: |
          # 更新 package.json 中的版本
          ncu -u

          # 安装更新的依赖
          npm install

          # 修复安全漏洞
          npm audit fix

      - name: 运行测试
        working-directory: ./web
        run: |
          npm run test
          npm run build

      - name: 创建 Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Node.js dependencies"
          title: "🔄 自动更新 Node.js 依赖"
          body: |
            ## 🔄 自动依赖更新

            此 PR 自动更新了前端项目的 Node.js 依赖包到最新版本。

            ### 📋 检查清单
            - [x] 依赖更新完成
            - [x] 安全漏洞修复
            - [x] 测试通过
            - [x] 构建成功
            - [ ] 手动验证前端功能正常

            ### 🔍 请注意
            请仔细检查更新的依赖是否存在破坏性变更。
          branch: automated/update-node-dependencies
          delete-branch: true

  # ===== Docker 基础镜像更新 =====
  update-docker-images:
    name: 更新 Docker 基础镜像
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查镜像更新
        id: check-updates
        run: |
          # 检查 Dockerfile 中的基础镜像
          CURRENT_GO_IMAGE=$(grep "FROM golang:" deployments/Dockerfile | head -1 | cut -d' ' -f2)
          CURRENT_NODE_IMAGE=$(grep "FROM node:" deployments/Dockerfile | head -1 | cut -d' ' -f2)
          CURRENT_ALPINE_IMAGE=$(grep "FROM alpine:" deployments/Dockerfile | tail -1 | cut -d' ' -f2)

          echo "current-go-image=$CURRENT_GO_IMAGE" >> $GITHUB_OUTPUT
          echo "current-node-image=$CURRENT_NODE_IMAGE" >> $GITHUB_OUTPUT
          echo "current-alpine-image=$CURRENT_ALPINE_IMAGE" >> $GITHUB_OUTPUT

          # 获取最新版本（这里简化处理，实际可以调用 Docker Hub API）
          LATEST_GO_IMAGE="golang:1.23-alpine"
          LATEST_NODE_IMAGE="node:18-alpine"
          LATEST_ALPINE_IMAGE="alpine:3.18"

          echo "latest-go-image=$LATEST_GO_IMAGE" >> $GITHUB_OUTPUT
          echo "latest-node-image=$LATEST_NODE_IMAGE" >> $GITHUB_OUTPUT
          echo "latest-alpine-image=$LATEST_ALPINE_IMAGE" >> $GITHUB_OUTPUT

          # 检查是否需要更新
          NEEDS_UPDATE=false
          if [ "$CURRENT_GO_IMAGE" != "$LATEST_GO_IMAGE" ]; then
            NEEDS_UPDATE=true
          fi
          if [ "$CURRENT_NODE_IMAGE" != "$LATEST_NODE_IMAGE" ]; then
            NEEDS_UPDATE=true
          fi
          if [ "$CURRENT_ALPINE_IMAGE" != "$LATEST_ALPINE_IMAGE" ]; then
            NEEDS_UPDATE=true
          fi

          echo "needs-update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT

      - name: 更新 Dockerfile
        if: steps.check-updates.outputs.needs-update == 'true'
        run: |
          # 更新基础镜像版本
          sed -i "s|${{ steps.check-updates.outputs.current-go-image }}|${{ steps.check-updates.outputs.latest-go-image }}|g" deployments/Dockerfile
          sed -i "s|${{ steps.check-updates.outputs.current-node-image }}|${{ steps.check-updates.outputs.latest-node-image }}|g" deployments/Dockerfile
          sed -i "s|${{ steps.check-updates.outputs.current-alpine-image }}|${{ steps.check-updates.outputs.latest-alpine-image }}|g" deployments/Dockerfile

      - name: 测试 Docker 构建
        if: steps.check-updates.outputs.needs-update == 'true'
        run: |
          docker build -f deployments/Dockerfile -t test-image .

      - name: 创建 Pull Request
        if: steps.check-updates.outputs.needs-update == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Docker base images"
          title: "🐳 自动更新 Docker 基础镜像"
          body: |
            ## 🐳 Docker 基础镜像更新

            此 PR 自动更新了 Dockerfile 中的基础镜像到最新版本。

            ### 📋 更新内容
            - Go 镜像: `${{ steps.check-updates.outputs.current-go-image }}` → `${{ steps.check-updates.outputs.latest-go-image }}`
            - Node 镜像: `${{ steps.check-updates.outputs.current-node-image }}` → `${{ steps.check-updates.outputs.latest-node-image }}`
            - Alpine 镜像: `${{ steps.check-updates.outputs.current-alpine-image }}` → `${{ steps.check-updates.outputs.latest-alpine-image }}`

            ### 📋 检查清单
            - [x] Dockerfile 更新完成
            - [x] Docker 构建测试通过
            - [ ] 手动验证应用正常运行

            ### 🔍 请注意
            请验证镜像更新后应用的兼容性和安全性。
          branch: automated/update-docker-images
          delete-branch: true
