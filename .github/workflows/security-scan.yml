# 安全扫描工作流（默认禁用）
name: Security Scan

on:
  # 默认禁用自动触发，需要手动启用
  # schedule:
  #   # 每天凌晨 2:00 UTC 运行安全扫描
  #   - cron: "0 2 * * *"
  # push:
  #   branches: [main, develop]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:
    inputs:
      enable_workflow:
        description: "启用工作流（默认禁用）"
        required: true
        default: false
        type: boolean
      scan_type:
        description: "扫描类型"
        required: false
        default: "full"
        type: choice
        options:
          - code
          - dependencies
          - container
          - full

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== 代码安全扫描 =====
  code-security-scan:
    name: 代码安全扫描
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_workflow == true && (inputs.scan_type == 'code' || inputs.scan_type == 'full') }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Go 安全扫描
      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Go 安全扫描 (gosec)
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "-fmt sarif -out gosec-results.sarif ./..."

      - name: 上传 gosec 结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: gosec-results.sarif

      # Go 漏洞扫描
      - name: Go 漏洞扫描 (govulncheck)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      # Node.js 安全扫描
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Node.js 安全审计
        working-directory: ./web
        run: |
          npm ci
          npm audit --audit-level=high

      # 代码质量和安全扫描
      - name: SonarCloud 扫描
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 敏感信息扫描
      - name: 敏感信息扫描 (truffleHog)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ===== 依赖安全扫描 =====
  dependency-security-scan:
    name: 依赖安全扫描
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # Go 模块安全扫描
      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Nancy 扫描 Go 依赖
        run: |
          go list -json -deps ./... | curl -sSL --data-binary @- https://nancy.sonatype.com/api/v1/vulnerable-dependencies

      # Node.js 依赖扫描
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Snyk 依赖扫描
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=web/package.json --severity-threshold=high

      # 许可证合规检查
      - name: FOSSA 许可证扫描
        if: env.FOSSA_API_KEY != ''
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

  # ===== 容器安全扫描 =====
  container-security-scan:
    name: 容器安全扫描
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建测试镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          load: true
          tags: domain-max:security-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy 漏洞扫描
      - name: Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "domain-max:security-test"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      # Anchore 容器安全扫描
      - name: Anchore 容器扫描
        uses: anchore/scan-action@v3
        id: anchore-scan
        with:
          image: "domain-max:security-test"
          fail-build: false
          severity-cutoff: high

      - name: 上传 Anchore 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.anchore-scan.outputs.sarif }}

      # Grype 漏洞扫描
      - name: Grype 漏洞扫描
        uses: anchore/grype-action@v1
        with:
          image: "domain-max:security-test"
          fail-build: false
          severity-cutoff: high

  # ===== 基础设施安全扫描 =====
  infrastructure-security-scan:
    name: 基础设施安全扫描
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # Dockerfile 安全检查
      - name: Hadolint Dockerfile 检查
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: deployments/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: 上传 Hadolint 结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      # Docker Compose 安全检查
      - name: Docker Compose 安全检查
        run: |
          # 检查敏感信息暴露
          if grep -r "password.*=" deployments/docker-compose.yml | grep -v "\${"; then
            echo "警告: Docker Compose 文件中发现硬编码密码"
            exit 1
          fi

          # 检查特权容器
          if grep -r "privileged.*true" deployments/docker-compose.yml; then
            echo "警告: 发现特权容器配置"
            exit 1
          fi

      # Kubernetes 配置安全检查 (如果有的话)
      - name: Kubesec 安全检查
        if: hashFiles('k8s/**/*.yaml') != ''
        run: |
          curl -sSX POST --data-binary @k8s/deployment.yaml https://v2.kubesec.io/scan

      # Terraform 安全检查 (如果有的话)
      - name: tfsec Terraform 安全检查
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  # ===== SAST 扫描 =====
  sast-scan:
    name: 静态应用安全测试
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # CodeQL 分析
      - name: 初始化 CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: go, javascript

      - name: 自动构建
        uses: github/codeql-action/autobuild@v2

      - name: 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v2

      # Semgrep 静态分析
      - name: Semgrep 扫描
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: true
          generateSarif: "1"

      - name: 上传 Semgrep 结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  # ===== 生成安全报告 =====
  security-report:
    name: 生成安全报告
    runs-on: ubuntu-latest
    needs:
      [
        code-security-scan,
        dependency-security-scan,
        container-security-scan,
        infrastructure-security-scan,
        sast-scan,
      ]
    if: always()

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 生成安全报告
        run: |
          echo "# 🛡️ Domain MAX 安全扫描报告" > security-report.md
          echo "" >> security-report.md
          echo "**扫描时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
          echo "**提交**: \`$(git rev-parse --short HEAD)\`" >> security-report.md
          echo "**分支**: \`${{ github.ref_name }}\`" >> security-report.md
          echo "" >> security-report.md

          echo "## 📋 扫描结果" >> security-report.md
          echo "" >> security-report.md
          echo "| 扫描类型 | 状态 | 说明 |" >> security-report.md
          echo "|---------|------|------|" >> security-report.md
          echo "| 代码安全扫描 | ${{ needs.code-security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | 源代码安全性检查 |" >> security-report.md
          echo "| 依赖安全扫描 | ${{ needs.dependency-security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | 第三方依赖漏洞检查 |" >> security-report.md
          echo "| 容器安全扫描 | ${{ needs.container-security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | Docker 镜像安全检查 |" >> security-report.md
          echo "| 基础设施扫描 | ${{ needs.infrastructure-security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | 配置文件安全检查 |" >> security-report.md
          echo "| 静态分析 | ${{ needs.sast-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | 静态应用安全测试 |" >> security-report.md
          echo "" >> security-report.md

          echo "## 🔍 详细结果" >> security-report.md
          echo "" >> security-report.md
          echo "详细的扫描结果请查看 GitHub Security 标签页。" >> security-report.md
          echo "" >> security-report.md
          echo "## 📋 安全建议" >> security-report.md
          echo "" >> security-report.md
          echo "1. 定期更新依赖包到最新版本" >> security-report.md
          echo "2. 及时修复发现的安全漏洞" >> security-report.md
          echo "3. 使用强密码和安全的配置" >> security-report.md
          echo "4. 启用所有安全特性和防护机制" >> security-report.md

      - name: 上传安全报告
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: 发送安全报告
        if: github.event_name == 'schedule' && secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🛡️ Domain MAX 安全扫描完成",
              "attachments": [
                {
                  "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                  "fields": [
                    {
                      "title": "扫描结果",
                      "value": "${{ contains(needs.*.result, 'failure') && '发现安全问题' || '未发现严重问题' }}",
                      "short": true
                    },
                    {
                      "title": "详细报告",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|查看详情>",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
